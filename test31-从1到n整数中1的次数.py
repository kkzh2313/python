'''
输入整数n，计算从1到n所有的整数中，数字1出现的次数
如：n=13,则1-13中包含数字1有1,10,11,12,13  共计6次
'''

'''
方法一，普通思路，对1-n中的每个数进行1个数的判定，需要有两轮循环，
第一轮循环是对当前数每一位数字是否为1进行判断，从个位开始看
第二轮循环是遍历1到n这n个数字，重复第一轮的过程

时间复杂度高，为O(nlogn) 10为底

'''
# -*- coding:utf-8 -*-
class Solution:
    def NumberOf1Between1AndN_Solution(self, n):
        if n <1 and type(n)!=int:
            number1Sum = 0
        for i in range(1,n+1):
            number1Sum += self.NumberOf1(i)
        return number1Sum
    #用来统计当前数字一共有多少位数字1
    def NumberOf1(self,n):
        number1 = 0
        while n:
            if n%10 == 1:#先从该数个数开始看，判断是否为1.例如123来查看个位是否为1
                number1 += 1
                n = n//10 # 舍掉最低位，例如n从123变为12
        return number1

'''
链接：https://www.nowcoder.com/questionTerminal/bd7f978302044eee894445e244c7eee6
来源：牛客网
找规律得到的解答
 //主要思路：设定整数点（如1、10、100等等）作为位置点i（对应n的个位、十位、百位等等），分别对每个数位上有多少包含1的点进行分析
    //根据设定的整数位置，对n进行分割，分为两部分，高位n/i，低位n%i
    //当i表示百位，且百位对应的数>=2,如n=31456,i=100，则a=314,b=56，此时百位为1的次数有a/10+1=32（最高两位0~31），每一次都包含100个连续的点，即共有(a/10+1)*i个点的百位为1
    //当i表示百位，且百位对应的数为1，如n=31156,i=100，则a=311,b=56，此时百位对应的就是1，则共有a/10(最高两位0-30)次是包含100个连续点，当最高两位为31（即a=311），本次只对应局部点00~56，共b+1次，所有点加起来共有（a/10*100）+(b+1)，这些点百位对应为1
    //当i表示百位，且百位对应的数为0,如n=31056,i=100，则a=310,b=56，此时百位为1的次数有a/10=31（最高两位0~30）

    //综合以上三种情况，当百位对应0或>=2时，有(a+8)/10次包含所有100个点，还有当百位为1(a%10==1)，需要增加局部点b+1
    //之所以补8，是因为当百位为0，则a/10==(a+8)/10; 当百位>=2，补8会产生进位位，效果等同于(a/10+1)
时间效率为O(logn)
'''

class Solution2:
    def NumberOf1Between1AndN_Solution(self, n):
        count = 0
        i = 1 #i表示当前位，起始是从个位开始，所以为1（10的0次方）
        while i <= n: #i超过n最高位时结束循环
            #将n分为两部分，高位数a以及低位数b
            a = n//i
            b = n%i
            if a%10==1:
                count += (a//10)*i + (b+1)
            else:
                count += ((a+8)//10)*i
            i *= 10 #i开始进位
        return count
n = 13
s = Solution2()
print(s.NumberOf1Between1AndN_Solution(n))